//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllCampaigns(completion: @escaping ((_ data: [Campaign]?,_ error: Error?) -> Void)) {
        getAllCampaignsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    
    /**
     - GET /campaigns
     - examples: [{contentType=application/json, example=[ {
     "vocabulary" : [ "vocabulary", "vocabulary" ],
     "name" : "name",
     "description" : "description",
     "id" : 0,
     "ownerId" : 6,
     "type" : { }
     }, {
     "vocabulary" : [ "vocabulary", "vocabulary" ],
     "name" : "name",
     "description" : "description",
     "id" : 0,
     "ownerId" : 6,
     "type" : { }
     } ]}]
     
     - returns: RequestBuilder<[Campaign]>
     */
    open class func getAllCampaignsWithRequestBuilder() -> RequestBuilder<[Campaign]> {
        let path = "/campaigns"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<[Campaign]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter campaignId: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCampaign(campaignId: Int, completion: @escaping ((_ data: Campaign?,_ error: Error?) -> Void)) {
        getCampaignWithRequestBuilder(campaignId: campaignId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    
    /**
     - GET /campaigns/{campaignId}
     - examples: [{contentType=application/json, example={
     "vocabulary" : [ "vocabulary", "vocabulary" ],
     "name" : "name",
     "description" : "description",
     "id" : 0,
     "ownerId" : 6,
     "type" : { }
     }}]
     
     - parameter campaignId: (path)
     
     - returns: RequestBuilder<Campaign>
     */
    open class func getCampaignWithRequestBuilder(campaignId: Int) -> RequestBuilder<Campaign> {
        var path = "/campaigns/{campaignId}"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<Campaign>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter campaignId: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomImage(campaignId: Int, completion: @escaping ((_ data: ImageData?,_ error: Error?) -> Void)) {
        getRandomImageWithRequestBuilder(campaignId: campaignId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    
    /**
     - GET /campaigns/{campaignId}/images/random
     - examples: [{contentType=application/json, example={
     "campaignId" : 6,
     "annotations" : [ {
     "imageId" : 3,
     "campaignId" : 9,
     "id" : 5,
     "label" : "label",
     "type" : "type",
     "userId" : 7,
     "points" : [ {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     }, {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     } ]
     }, {
     "imageId" : 3,
     "campaignId" : 9,
     "id" : 5,
     "label" : "label",
     "type" : "type",
     "userId" : 7,
     "points" : [ {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     }, {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     } ]
     } ],
     "id" : 0,
     "userId" : 1
     }}]
     
     - parameter campaignId: (path)
     
     - returns: RequestBuilder<ImageData>
     */
    open class func getRandomImageWithRequestBuilder(campaignId: Int) -> RequestBuilder<ImageData> {
        var path = "/campaigns/{campaignId}/images/random"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<ImageData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter imageFile: (form)
     - parameter campaignId: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postImage(imageFile: URL, campaignId: Int, completion: @escaping ((_ data: ImageData?,_ error: Error?) -> Void)) {
        postImageWithRequestBuilder(imageFile: imageFile, campaignId: campaignId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    
    /**
     - POST /campaigns/{campaignId}/images
     - examples: [{contentType=application/json, example={
     "campaignId" : 6,
     "annotations" : [ {
     "imageId" : 3,
     "campaignId" : 9,
     "id" : 5,
     "label" : "label",
     "type" : "type",
     "userId" : 7,
     "points" : [ {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     }, {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     } ]
     }, {
     "imageId" : 3,
     "campaignId" : 9,
     "id" : 5,
     "label" : "label",
     "type" : "type",
     "userId" : 7,
     "points" : [ {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     }, {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     } ]
     } ],
     "id" : 0,
     "userId" : 1
     }}]
     
     - parameter imageFile: (form)
     - parameter campaignId: (path)
     
     - returns: RequestBuilder<ImageData>
     */
    open class func postImageWithRequestBuilder(imageFile: URL, campaignId: Int) -> RequestBuilder<ImageData> {
        var path = "/campaigns/{campaignId}/images"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "imageFile": imageFile
        ]
        
        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<ImageData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    
    /**
     
     - parameter campaignId: (path)
     - parameter imageId: (path)
     - parameter request: (body)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postImageAnnotation(campaignId: Int, imageId: Int, request: AnnotationCreationRequest, completion: @escaping ((_ data: Annotation?,_ error: Error?) -> Void)) {
        postImageAnnotationWithRequestBuilder(campaignId: campaignId, imageId: imageId, request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }
    
    
    /**
     - POST /campaigns/{campaignId}/images/{imageId}/annotations
     - examples: [{contentType=application/json, example={
     "imageId" : 3,
     "campaignId" : 9,
     "id" : 5,
     "label" : "label",
     "type" : "type",
     "userId" : 7,
     "points" : [ {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     }, {
     "x" : 5.637376656633329,
     "y" : 2.3021358869347655
     } ]
     }}]
     
     - parameter campaignId: (path)
     - parameter imageId: (path)
     - parameter request: (body)
     
     - returns: RequestBuilder<Annotation>
     */
    open class func postImageAnnotationWithRequestBuilder(campaignId: Int, imageId: Int, request: AnnotationCreationRequest) -> RequestBuilder<Annotation> {
        var path = "/campaigns/{campaignId}/images/{imageId}/annotations"
        let campaignIdPreEscape = "\(campaignId)"
        let campaignIdPostEscape = campaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{campaignId}", with: campaignIdPostEscape, options: .literal, range: nil)
        let imageIdPreEscape = "\(imageId)"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageId}", with: imageIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)
        
        let url = URLComponents(string: URLString)
        
        let requestBuilder: RequestBuilder<Annotation>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()
        
        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    
}

